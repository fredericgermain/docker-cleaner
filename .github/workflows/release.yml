name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Package
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            rpm_arch: x86_64
          - os: ubuntu-latest
            arch: arm64
            rpm_arch: aarch64
    runs-on: ${{ matrix.arch == 'aarch64' && matrix.runner || matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Build
      run: cargo build --release
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          sudo apt-get install -y rpm
        fi
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Prepare Debian package
      run: |
        mkdir -p debian/DEBIAN
        mkdir -p debian/usr/bin
        cp target/release/docker-cleaner debian/usr/bin/
        cat << EOF > debian/DEBIAN/control
        Package: docker-cleaner
        Version: ${{ steps.get_version.outputs.VERSION }}
        Architecture: ${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}
        Maintainer: Your Name <your.email@example.com>
        Description: A tool to clean Docker resources
        EOF
        dpkg-deb --build debian
        mv debian.deb docker-cleaner_${{ steps.get_version.outputs.VERSION }}_${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}.deb
    
    - name: Prepare RPM package
      if: matrix.arch == 'x86_64' # github runner rpmbuild does not support aarch64 yet
      run: |
        mkdir -p rpm/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        cp target/release/docker-cleaner rpm/SOURCES/
        cat << EOF > rpm/SPECS/docker-cleaner.spec
        Name: docker-cleaner
        Version: ${{ steps.get_version.outputs.VERSION }}
        Release: 1
        Summary: A tool to clean Docker resources
        License: MIT
        BuildArch: ${{ matrix.rpm_arch }}
        
        %description
        A tool to clean Docker resources
        
        %install
        mkdir -p %{buildroot}/usr/bin
        cp %{_sourcedir}/docker-cleaner %{buildroot}/usr/bin/docker-cleaner
        
        %files
        /usr/bin/docker-cleaner
        EOF
        rpmbuild -bb --target=${{ matrix.rpm_arch }} --define "_topdir $(pwd)/rpm" rpm/SPECS/docker-cleaner.spec
        mv rpm/RPMS/*/*.rpm ./docker-cleaner-${{ steps.get_version.outputs.VERSION }}-1.${{ matrix.rpm_arch }}.rpm
    
    - name: Prepare tar.bz2 archive
      run: |
        tar -cjvf docker-cleaner-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}.tar.bz2 -C target/release docker-cleaner
    

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.arch }}
        path: |
          *.deb
          *.rpm
          *.tar.bz2
        compression-level: 0  # No compression for binary files

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --generate-notes
    
    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for dir in packages-*; do
          for file in $dir/*; do
            gh release upload ${{ github.ref_name }} "$file"
          done
        done
