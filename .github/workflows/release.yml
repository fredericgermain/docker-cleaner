name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}
    
    - name: Install packaging tools
      run: |
        sudo apt-get install -y dpkg-dev rpm
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Prepare Debian package
      run: |
        mkdir -p debian/DEBIAN
        mkdir -p debian/usr/bin
        cp target/${{ matrix.target }}/release/docker-cleaner debian/usr/bin/
        cat << EOF > debian/DEBIAN/control
        Package: docker-cleaner
        Version: ${{ steps.get_version.outputs.VERSION }}
        Architecture: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'amd64' || 'arm64' }}
        Maintainer: Your Name <your.email@example.com>
        Description: A tool to clean Docker resources
        EOF
        dpkg-deb --build debian
        mv debian.deb docker-cleaner_${{ steps.get_version.outputs.VERSION }}_${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'amd64' || 'arm64' }}.deb
    
    - name: Prepare RPM package
      run: |
        mkdir -p rpm/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        cp target/${{ matrix.target }}/release/docker-cleaner rpm/SOURCES/
        cat << EOF > rpm/SPECS/docker-cleaner.spec
        Name: docker-cleaner
        Version: ${{ steps.get_version.outputs.VERSION }}
        Release: 1
        Summary: A tool to clean Docker resources
        License: MIT
        BuildArch: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}
        
        %description
        A tool to clean Docker resources
        
        %install
        mkdir -p %{buildroot}/usr/bin
        cp %{_sourcedir}/docker-cleaner %{buildroot}/usr/bin/docker-cleaner
        
        %files
        /usr/bin/docker-cleaner
        EOF
        rpmbuild -bb --target=${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }} --define "_topdir $(pwd)/rpm" rpm/SPECS/docker-cleaner.spec
        mv rpm/RPMS/*/*.rpm ./docker-cleaner-${{ steps.get_version.outputs.VERSION }}-1.${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}.rpm
    
    - name: Prepare tar.bz2 archive
      run: |
        tar -cjvf docker-cleaner-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.bz2 -C target/${{ matrix.target }}/release docker-cleaner
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages-${{ matrix.target }}
        path: |
          *.deb
          *.rpm
          *.tar.bz2

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const { repo: { owner, repo }, sha } = context;
          
          for (const dir of ['packages-x86_64-unknown-linux-gnu', 'packages-aarch64-unknown-linux-gnu']) {
            const files = await fs.readdir(dir);
            for (const file of files) {
              const filePath = `${dir}/${file}`;
              const stats = await fs.stat(filePath);
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: ${{ steps.create_release.outputs.id }},
                name: file,
                data: await fs.readFile(filePath),
                headers: {
                  "content-type": "application/octet-stream",
                  "content-length": stats.size
                }
              });
            }
          }